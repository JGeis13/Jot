"use strict";function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}var ui=function(){function a(a){a?(f(),document.addEventListener("click",N),ha=!0,ga=db.collection("users").doc(a.uid),ga.get().then(function(b){b.exists?(Z=b.data().accountInfo,h(a)):console.log("Error, no document exists.")}).then(function(){initiateCollapsibleLists()})):e()}function b(a){W=a;var b=Object.values(W).sort(function(c,a){return c.order-a.order});ca.innerHTML="";var c="";b.forEach(function(a){c+="\n        <li class=\"collection-item\" data-id=".concat(a.id," data-order=").concat(a.order,">\n          <i class='material-icons drag'>drag_handle</i>\n          <div class='complete-btn'></div>\n          <span class='text'>").concat(a.title,"</span>\n        </li>")}),ca.innerHTML=c;var d=ca.parentElement.querySelector(".custom-collapse-trigger > span");d.textContent=b.length,console.log("todos list re-built")}function c(a){X=a;var b=Object.values(X).sort(function(c,a){return c.order-a.order});da.innerHTML="";var c="";b.forEach(function(a){c+="\n        <li class=\"collection-item\" data-id=".concat(a.id," data-order=").concat(a.order,">\n          <span class='complete-btn reinstate-btn'><i class='material-icons'>done</i></span>\n          <span class='text'>").concat(a.title,"</span>\n          <span><i class='material-icons delete-btn'>delete</i></span>\n        </li>")}),da.innerHTML=c;var d=da.parentElement.querySelector(".custom-collapse-trigger > span");d.textContent=b.length,console.log("completed list re-built")}function d(a){Y=a;var b=Object.values(Y).sort(function(c,a){return c.order-a.order});ea.innerHTML="";var c="";b.forEach(function(a){var b=a.formattedContent.replace(/<div>/g," ");b=b.replace(/<[^>]+>/g,""),c+="\n        <li class=\"collection-item\" data-id=".concat(a.id," data-order=").concat(a.order,">\n          <i class='material-icons drag'>drag_handle</i>\n          <span class='note-contain'>\n            <span class='text'>").concat(a.formattedTitle,"</span>\n            <span class='content'>").concat(b,"</span>\n          </span>\n        </li>")}),ea.innerHTML=c,console.log("notes list re-built")}function e(){ha&&(document.removeEventListener("click",N),ha=!1),aa.forEach(function(a){return a.style.display="none"}),ba.forEach(function(a){return a.style.display="block"}),g()}function f(){document.addEventListener("click",N),aa.forEach(function(a){return a.style.display="block"}),ba.forEach(function(a){return a.style.display="none"})}function g(){ca.innerHTML="",da.innerHTML="",ea.innerHTML="",ga=null,W=null,X=null,Z=null,Y=null,$.querySelector(".info").innerHTML=""}function h(a){var b=$.querySelector(".info"),c="",d=[["photoURL","Photo"],["displayName","Display Name"],["email","Email"],["verified","Verified"],,["phoneNumber","Phone Number"],["metadata.creationTime","Created"],["metadata.lastSignInTime","Last Sign In"]];d.forEach(function(b){a[b[0]]&&("photoURL"===b[0]?c+=c+="<div><img src='".concat(a[b[0]],"' style=\"max-width: 60px;\"/></div>"):c+="<div><span style='font-weight: bold;'>".concat(b[1],": </span>").concat(a[b[0]],"</div>"))}),c+="<div><span style='font-weight: bold;'>Member Level: </span>".concat(Z.memberLevel,"</div>"),b.innerHTML=c}function i(a){var b=document.querySelector("#edit-item-widget .delete");b.style.display="editingTodo"===ia?"block":"none";var c=a.getBoundingClientRect();a.querySelector(".text").contentEditable=!0,a.querySelector(".text").focus(),fa.dataset.currentTodo=a.dataset.id,fa.style.left=c.x+5+"px",fa.style.top=c.y+c.height+5+"px",fa.style.width=document.querySelector("#todos-collection").getBoundingClientRect().width-10+"px",fa.style.display="block"}function j(){var a=document.querySelectorAll("#todos-collection .collection-item");a.forEach(function(a){a.classList.remove("editable"),a.querySelector(".text").contentEditable="false"}),fa.style.display="none",fa.dataset.currentTodo="",ia=null}function k(){var a=document.querySelectorAll("#todos-collection .collection-item .drag");"none"===a[0].style.display?a.forEach(function(a){a.style.display="block"}):a.forEach(function(a){a.style.display="none"})}function l(){console.log("create todo");var a=document.createElement("LI");a.innerHTML="<i class='material-icons drag'>drag_handle</i><span class='text'></span>",a.classList.add("collection-item"),a.classList.add("editable"),a.dataset.id=U(),ca.appendChild(a),ia="creatingTodo",I(),k()}function m(){console.log("cancel newTodo"),ca.removeChild(ca.lastChild),ia=null,k()}function n(a){console.log("edit todo: "+a.dataset.id),a.classList.add("editable"),a.querySelector(".complete-btn").classList.add("hidden"),ia="editingTodo",I(),k()}function o(){console.log("cancel editTodo");var a=document.querySelector("#todos-collection .editable"),b=a.dataset.id,c=W[b];J(),document.querySelector(".hidden").classList.remove("hidden"),a.querySelector(".text").textContent=c.title,a.classList.remove("editable"),ia=null,j(),k()}function p(a){console.log("view note");var b=a.dataset.id,c=_.querySelector(".modal-content .title"),d=_.querySelector(".modal-content .content");c.innerHTML=Y[b].formattedTitle,d.innerHTML=Y[b].formattedContent,_.dataset.id=b,ia="viewingNote"}function q(){console.log("edit note"),u(),ia="editingNote"}function r(){var a=_.querySelector(".modal-content .title"),b=_.querySelector(".modal-content .content"),c=document.querySelector("#modal-note .edit-save-btn");c.classList.contains("save")&&(t(),v()),_.classList.contains("new-note")&&_.classList.remove("new-note"),a.innerHTML="",b.innerHTML="",a.contentEditable="false",b.contentEditable="false",_.dataset.id="",ia=null,M.Modal.getInstance(_).close()}function s(){u(),t(),_.dataset.id=U(),_.classList.add("new-note"),ia="editingNote",M.Modal.getInstance(_).open()}function t(){var a=document.querySelector("#modal-note .edit-save-btn");a.classList.contains("edit")?(a.classList.remove("edit"),a.classList.add("save"),a.textContent="Save"):(a.classList.remove("save"),a.classList.add("edit"),a.textContent="Edit")}function u(){var a=document.querySelector("#modal-note .modal-content"),b=document.querySelector("#modal-note .title"),c=document.querySelector("#modal-note .content");a.classList.add("editable"),b.contentEditable="true",c.contentEditable="true",b.addEventListener("paste",L)}function v(){var a=document.querySelector("#modal-note .modal-content"),b=document.querySelector("#modal-note .title"),c=document.querySelector("#modal-note .content");a.classList.remove("editable"),b.contentEditable="false",c.contentEditable="false";var d=document.querySelectorAll(".editor-wrapper .toolbar");d.forEach(function(a){return a.style.display="none"}),b.removeEventListener("paste",L)}function w(){console.log("save new todo");var a=document.querySelector("#todos-collection .editable"),b=a.querySelector(".text").textContent,c="todos."+a.dataset.id;ga.update(_defineProperty({},c,{title:b,id:a.dataset.id,order:Object.keys(W).length+1,timestamp:firebase.firestore.Timestamp.now(),lastEdited:firebase.firestore.Timestamp.now()})).then(function(){console.log("Added Item"),M.toast({html:"New Todo Created"})})["catch"](function(a){console.log(a),M.toast({html:"Error Saving Todo"})}),ia=null,k()}function x(){var a;console.log("save edit todo");var b=document.querySelector("#todos-collection .editable"),c=b.dataset.id,d=b.querySelector(".text").textContent;if(d===W[c].title)return console.log("edit item is the same, not saved"),void document.querySelector(".hidden").classList.remove("hidden");ga.update((a={},_defineProperty(a,"todos."+c+".title",d),_defineProperty(a,"todos."+c+".lastEdited",firebase.firestore.Timestamp.now()),a)).then(function(){console.log("Edited Item Success"),M.toast({html:"Edit Saved"})})["catch"](function(a){console.error(a),console.log("Error adding item"),M.toast({html:"Error Saving Edit"})}),k()}function y(a){console.log("delete todo"),delete W[a];var b=document.querySelectorAll("#todos-collection .collection-item"),c=Array.from(b).filter(function(b){return b.dataset.id!==a});c.forEach(function(a,b){W[a.dataset.id].order=b+1}),ga.update({todos:W}).then(function(){console.log("Deleted Todo"),M.toast({html:"Deleted Todo"})})["catch"](function(a){console.log(a),M.toast({html:"Errore Deleting Todo"})}),ia=null}function z(a){console.log("COMPLETED A TODO!!!"),X[a]=W[a],X[a].completedTimestamp=firebase.firestore.Timestamp.now(),X[a].order=Object.keys(X).length;var b=W[a].order;for(var c in delete W[a],W)W[c].order>b&&(W[c].order-=1);ga.update({completedTodos:X,todos:W}).then(function(){M.toast({html:"Completed a todo!"})})}function A(a){console.log("delete completed todo"),delete X[a],ga.update({completedTodos:X}).then(function(){M.toast({html:"Deleted Completed Item"})})["catch"](function(a){console.error(a.message)})}function B(){X={},ga.update({completedTodos:X}).then(function(){M.toast({html:"Deleted All Completed Items"})})}function C(a){console.log("Put back a todo"),W[a]=X[a],W[a].lastEdited=firebase.firestore.Timestamp.now(),W[a].order=Object.keys(W).length,delete W[a].completedTimestamp,delete X[a],ga.update({completedTodos:X,todos:W})}function D(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;a?ga.update({todos:a}):ga.update({todos:W})}function E(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;a?ga.update({notes:a}):ga.update({notes:notesData})}function F(){console.log("save new todo");var a=_.querySelector(".modal-content .title"),b=_.querySelector(".modal-content .content"),c="notes."+_.dataset.id;ga.update(_defineProperty({},c,{formattedTitle:a.innerHTML,rawTitle:a.textContent,formattedContent:b.innerHTML,rawContent:b.textContent,id:_.dataset.id,order:Object.keys(Y).length+1,timestamp:firebase.firestore.Timestamp.now(),lastEdited:firebase.firestore.Timestamp.now()})).then(function(){console.log("Added Note"),M.toast({html:"New Note Created"})})["catch"](function(a){console.log(a),M.toast({html:"Error Creating Note"})}),ia=null}function G(){var a;console.log("save note edit");var b=_.dataset.id,c=_.querySelector(".modal-content .title"),d=_.querySelector(".modal-content .content");if(c.textContent===Y[b].rawTitle&&d.textContent===Y[b].rawContent&&c.innerHTML===Y[b].formattedTitle&&d.innerHTML===Y[b].formattedContent)return void console.log("edit item is the same, not saved");ga.update((a={},_defineProperty(a,"notes."+b+".rawTitle",c.textContent),_defineProperty(a,"notes."+b+".formattedTitle",c.innerHTML),_defineProperty(a,"notes."+b+".rawContent",d.textContent),_defineProperty(a,"notes."+b+".formattedContent",d.innerHTML),_defineProperty(a,"notes."+b+".lastEdited",firebase.firestore.Timestamp.now()),a)).then(function(){console.log("Edited Note Success"),M.toast({html:"Note Edit Saved"})})["catch"](function(){return console.log("Error adding item")})}function H(a){console.log("delete note"),delete Y[a];var b=document.querySelectorAll("#notes-collection .collection-item"),c=Array.from(b).filter(function(b){return b.dataset.id!==a});c.forEach(function(a,b){Y[a.dataset.id].order=b+1}),ga.update({notes:Y}).then(function(){console.log("Deleted Note"),M.toast({html:"Deleted Note"})})["catch"](function(a){console.log(a),M.toast({html:"Error Deleting Note"})}),ia=null}function I(){var a=document.querySelector("#todos-collection .editable");a.addEventListener("keydown",K),a.addEventListener("paste",L)}function J(){var a=document.querySelector("#todos-collection .editable");a.removeEventListener("keydown",K),a.removeEventListener("paste",L)}function K(a){"Enter"===a.key?(a.preventDefault(),"editingTodo"===ia?x():"creatingTodo"==ia&&w(),j()):"Escape"===a.key&&(a.preventDefault(),"editingTodo"===ia?o():"creatingTodo"==ia&&m())}function L(a){a.preventDefault();var b=a.clipboardData.getData("text/plain");b=b.replace(/\n/g," "),console.log(b),document.execCommand("insertText",!1,b),console.log(b)}function N(a){var b=a.target.closest("#modal-note"),c=a.target.closest("#todos-collection .collection-item"),d=a.target.closest("#todos-completed .collection-item"),e=a.target.closest("#edit-item-widget .cancel"),f=a.target.closest("#edit-item-widget .save"),g=a.target.closest("#edit-item-widget .delete"),h=a.target.closest("#add-todo"),k=a.target.closest("#add-note"),u=a.target.closest("#modal-note .save"),D=a.target.closest("#modal-note .edit"),E=a.target.closest("#modal-note .cancel"),I=a.target.closest("#modal-note .delete"),J=a.target.closest("#notes-collection .collection-item"),K=a.target.closest(".collection .collection-item .drag");if(!K)if(null!==ia){if("creatingTodo"===ia)c?c!==document.querySelector(".editable")&&(m(),j(),n(c),i(c)):f?(console.log("save new"),w(),j()):h?setTimeout(function(){document.querySelector(".editable .text").focus()},10):e?(console.log("cancel create new"),m(),j()):J?(m(),j(),p(J)):(console.log("outside cancel new"),m(),j());else if("editingTodo"===ia)c?c!==document.querySelector(".editable")&&(o(),n(c),i(c)):e?o():f?(console.log("save edit"),x(),j()):h?setTimeout(function(){document.querySelector(".editable .text").focus()},10):g?(y(document.querySelector("#todos-collection .editable").dataset.id),j()):J?(o(),j(),p(J)):(o(),j());else if("editingNote"!==ia)"viewingNote"===ia?D||E||I?D?(t(),q()):E?(console.log("cancel"),r()):I&&(H(_.dataset.id),r()):b||(console.log("clicked outside "),r()):console.error("Unhandled note status");else if(u||E||I){if(u){var S=!!Object.keys(Y).find(function(a){return a===_.dataset.id});S?G():F(),r()}else if(!E)I&&(H(_.dataset.id),r());else if(console.log("cancel"),_.classList.contains("new-note"))r();else{t(),v();var L=b.dataset.id,N=document.querySelector("#notes-collection [data-id=\""+L+"\"]");console.log(L,N),p(N)}}else if(!b)console.log("clicked outside "),r();else if(a.target.closest(".title")){a.target.closest(".title").focus();var O=a.target.closest(".title").closest(".editor-wrapper").querySelector(".toolbar"),P=document.querySelector("#modal-note .content").closest(".editor-wrapper").querySelector(".toolbar");O.style.display="flex",P.style.display="none"}else if(a.target.closest(".content")){a.target.closest(".content").focus();var Q=a.target.closest(".content").closest(".editor-wrapper").querySelector(".toolbar"),R=document.querySelector("#modal-note .title").closest(".editor-wrapper").querySelector(".toolbar");Q.style.display="flex",R.style.display="none"}else if(!a.target.closest(".toolbar")&&!a.target.closest(".modal-content.editable")){var T=document.querySelectorAll(".editor-wrapper .toolbar");T.forEach(function(a){return a.style.display="none"})}}else if(h)l(),i(document.querySelector("#todos-collection .editable"));else if(k)s();else if(c)a.target.closest(".complete-btn")?z(a.target.parentElement.dataset.id):(n(c),i(c));else if(d)a.target.closest(".reinstate-btn")?C(a.target.closest(".collection-item").dataset.id):a.target.closest(".delete-btn")&&A(a.target.closest(".collection-item").dataset.id);else if(!a.target.closest(".clear-all-badge"))J&&p(J);else if(0<Object.keys(X).length)new CustomDialog("Delete all completed todo items?",B)}function O(){if(0===Object.keys(ja).length)for(var a in W)ja[a]={id:W[a].id,order:W[a].order}}function P(a){var b=Array.from(a.from.children);b.forEach(function(a,b){W[a.dataset.id].order=b+1}),S()}function Q(){if(0===Object.keys(ka).length)for(var a in Y)ka[a]={id:Y[a].id,order:Y[a].order}}function R(a){var b=Array.from(a.from.children);b.forEach(function(a,b){Y[a.dataset.id].order=b+1}),ia="pendingNoteOrderSave",T()}function S(){var a=W;V(ja,a)?console.log("re-sorted to same order, db not queried"):(D(a),console.log("todo sort order saved")),M.toast({html:"Todo Order Saved"}),ia=null,ja={}}function T(){var a=Y;V(ka,a)?console.log("re-sorted notes to same order, db not queried"):(E(a),console.log("note sort order saved")),M.toast({html:"Note Order Saved"}),ia=null,ka={}}function U(){var a=Math.random().toString(36)+Date.now().toString(36);return a=a.replace("0.",""),a.slice(0,a.length)}function V(a,b){var c=Object.prototype.toString.call(a);if(c!==Object.prototype.toString.call(b))return!1;if(Object.keys(a).length!==Object.keys(b).length)return!1;for(var d in a)for(var e in a[d])if(a[d][e]===b[d][e])continue;else return!1;return!0}var W,X,Y,Z,$=document.querySelector("#modal-account"),_=document.querySelector("#modal-note"),aa=document.querySelectorAll(".logged-in"),ba=document.querySelectorAll(".logged-out"),ca=document.getElementById("todos-collection"),da=document.getElementById("todos-completed"),ea=document.getElementById("notes-collection"),fa=document.getElementById("edit-item-widget"),ga=null,ha=!1,ia=null,ja={},ka={};return function(){Sortable.create(ca,{ghostClass:"ghost",animation:100,handle:".drag",onStart:O,onEnd:P}),Sortable.create(ea,{ghostClass:"ghost",animation:100,handle:".drag",onStart:Q,onEnd:R})}(),document.addEventListener("DOMContentLoaded",function(){var a=document.querySelectorAll(".modal:not(#modal-note)");M.Modal.init(a),M.Modal.init(document.querySelector("#modal-note"),{dismissible:!1});var b=document.querySelectorAll(".dropdown-trigger");M.Dropdown.init(b)}),new TextEditor(document.querySelector("#modal-note .title"),controllersTitle),new TextEditor(document.querySelector("#modal-note .content"),controllersMain),{setupUI:a,buildTodos:b,buildCompletedTodos:c,buildNotes:d,getAccountInfo:function(a){Z=a}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,